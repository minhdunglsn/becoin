"""
Django settings for huutuananh project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

import dj_database_url
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Thiết lập thông tin cơ sở dữ liệu
DB_TYPE = os.environ.get("DB_TYPE", default="sqlite3")
if DB_TYPE == "postgresql":
    DB_HOST = os.environ.get("DB_HOST")
    DB_NAME = os.environ.get("DB_NAME")
    DB_USER = os.environ.get("DB_USER")
    DB_PASS = os.environ.get("DB_PASS")
    DB_PORT = int(os.environ.get("DB_PORT"))

# Thiết lập mailserver
MAIL_SERVER = os.environ.get("MAIL_SERVER", default=0)
ADMINS = [
    ("Hữu Tuấn Anh", "huutuananh1406@gmail.com"),
]
if MAIL_SERVER and "smtp" in MAIL_SERVER:
    EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND")
    EMAIL_HOST = os.environ.get("EMAIL_HOST")
    EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS")
    EMAIL_PORT = os.environ.get("EMAIL_PORT")
    EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=0))
ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    ".huutuananh.com",
    ".huutuananh.id.vn",
]
if os.environ.get("CLOUD_HOSTS", ""):
    ALLOWED_HOSTS += os.environ.get("CLOUD_HOSTS").split(",")

# Application definition
INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.sites",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "django.contrib.admin",
    # Ứng dụng bên thứ 3
    # 'crispy_forms',
    "django_summernote",
    "debug_toolbar",
    "dbbackup",
    # Ứng dụng cá nhân
    "weddings.apps.WeddingsConfig",
    "custom.apps.CustomConfig",
    "nguoi_dung.apps.NguoiDungConfig",
]

MIDDLEWARE = [
    "django.middleware.cache.UpdateCacheMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.cache.FetchFromCacheMiddleware",
    "django.middleware.gzip.GZipMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "huutuananh.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # `allauth` needs this from django
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "huutuananh.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
# Thiết lập cơ sở dữ liệu theo 2 loại sqlite3 hoặc postgresql
if DB_TYPE == "sqlite3":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
elif DB_TYPE == "postgresql":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": DB_NAME,
            "USER": DB_USER,
            "PASSWORD": DB_PASS,
            "HOST": DB_HOST,
            "PORT": DB_PORT,
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation."
        "UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation." "MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation." "CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation." "NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "vi-VN"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Thiết lập AWS S3
STATICFILES_DIRS = []
DBBACKUP_CLEANUP_KEEP = 5  # Lưu bản backup db trong 5 tuần gần nhất (Default: 10)
if DEBUG:
    STATIC_URL = "/static/"
    MEDIA_URL = "/media/"

    # Thiết lập dbbackup dùng local storage
    DBBACKUP_STORAGE = "django.core.files.storage.FileSystemStorage"
    DBBACKUP_STORAGE_OPTIONS = {
        "location": "backups/",
    }

else:
    INSTALLED_APPS += [
        # Sử dụng lưu trữ AWS S3 khi đóng gói
        "storages",
    ]
    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }
    # AWS_DEFAULT_ACL = "public-read"
    AWS_DEFAULT_ACL = None
    AWS_LOCATION = "static"
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    DEFAULT_FILE_STORAGE = "huutuananh.storage_backends.MediaStorage"

    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

    # Setup Sentry
    sentry_sdk.init(
        dsn=os.environ.get("SENTRY_DSN"),
        integrations=[DjangoIntegration()],
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=1.0,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
        environment=os.environ.get("ENV"),
        server_name=os.environ.get("SERVER_NAME"),
    )

    # Thiết lập dbbackup dùng S3
    DBBACKUP_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    DBBACKUP_STORAGE_OPTIONS = {
        "access_key": AWS_ACCESS_KEY_ID,
        "secret_key": AWS_SECRET_ACCESS_KEY,
        "bucket_name": AWS_STORAGE_BUCKET_NAME,
        "default_acl": "private",
        "location": "backups/",
    }

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
STATICFILES_DIRS += [
    MEDIA_ROOT,
]
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Thiết lập cache
if os.environ.get("MEMCACHEDCLOUD_SERVERS"):
    CACHES = {
        "default": {
            "BACKEND": "django_bmemcached.memcached.BMemcached",
            "LOCATION": os.environ.get("MEMCACHEDCLOUD_SERVERS").split(","),
            "OPTIONS": {
                "username": os.environ.get("MEMCACHEDCLOUD_USERNAME"),
                "password": os.environ.get("MEMCACHEDCLOUD_PASSWORD"),
            },
        },
    }

# Thiết lập cài đặt sessions
# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_ENGINE = "django.contrib.sessions.backends.db"

# Mô hình người dùng mặc định
AUTH_USER_MODEL = "nguoi_dung.NguoiDung"

# Thiết lập của Crispy Forms
CRISPY_TEMPLATE_PACK = "bootstrap4"

# Thiết lập của Summernote
X_FRAME_OPTIONS = "SAMEORIGIN"
SUMMERNOTE_THEME = "bs4"
SUMMERNOTE_CONFIG = {
    # Using SummernoteWidget - iframe mode, default
    "iframe": True,
    # Or, you can set it as False to use SummernoteInplaceWidget by
    # default - no iframe mode
    # In this case, you have to load Bootstrap/jQuery stuff by manually.
    # Use this when you're already using Bootstraip/jQuery based themes.
    # 'iframe': False,
    # You can put custom Summernote settings
    "summernote": {
        # As an example, using Summernote Air-mode
        "airMode": False,
        # 'airMode': True,
        # Change editor size
        "width": "100%",
        "height": "480",
        # Use proper language setting automatically (default)
        "lang": "vi-VN",
        # You can also add custom settings for external plugins
        "codemirror": {
            "mode": "htmlmixed",
            "lineNumbers": "true",
            # You have to include theme file in 'css' or 'css_for_inplace'
            # before using it.
            "theme": "monokai",
        },
    },
    # Need authentication while uploading attachments.
    "attachment_require_authentication": True,
    # Codemirror as codeview
    # If any codemirror settings are defined, it will include codemirror
    # files automatically.
    "css": (
        "//cdnjs.cloudflare.com/ajax/libs/codemirror/5.29.0/theme/monokai.min.css",
    ),
    # Lazy initialize
    # If you want to initialize summernote at the bottom of page, set this
    # as True and call `initSummernote()` on your page.
    "lazy": True,
}
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Triển khai lên Heroku
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES["default"].update(db_from_env)

# Thêm thiết lập bảo mật
# CSRF_COOKIE_SECURE = True
X_FRAME_OPTIONS = "SAMEORIGIN"
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
CORS_ORIGIN_ALLOW = True
CSRF_TRUSTED_ORIGINS = ["https://*.huutuananh.com", "https://*.127.0.0.1"]

# Thiết lập cookies
SESSION_COOKIE_AGE = 604800  # 1 tuần (đơn vị tính: giây)

# Các thiết lập cho Celery
if os.environ.get("REDIS_URL"):
    CELERY_BROKER_URL = os.environ.get("REDIS_URL")
    CELERY_RESULT_BACKEND = os.environ.get("REDIS_URL")
    CELERY_TASK_TRACK_STARTED = True
    CELERY_TASK_TIME_LIMIT = 30 * 60
    CELERY_TASK_SERIALIZER = "json"

SITE_ID = int(os.environ.get("SITE_ID"))

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

INTERNAL_IPS = [
    "127.0.0.1",
]

# Cache settings
CACHE_MIDDLEWARE_ALIAS = "default"
CACHE_MIDDLEWARE_SECONDS = 3600
CACHE_MIDDLEWARE_KEY_PREFIX = ""
IS_INSTALLING = bool(os.environ.get("IS_INSTALLING", 0))

# DBbackup settings
DBBACKUP_CONNECTORS = {"default": {"DROP": True, "RESTORE_SUFFIX": "--if-exists"}}
